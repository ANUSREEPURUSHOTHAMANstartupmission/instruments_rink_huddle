---
import Layout from '../layouts/Layout.astro';
import Navbar from "../components/Navbarp.svelte";
---

<Layout>
    <Navbar client:load></Navbar>

    <!-- Add a loading spinner -->
    <!-- <div id="loading" class="flex justify-center items-center h-screen">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 100 100" width="50" height="50" fill="#000">
            <circle cx="50" cy="50" r="35" stroke-width="10" stroke="#000" fill="none" stroke-dasharray="150" stroke-dashoffset="0">
                <animateTransform attributeName="transform" type="rotate" values="0 50 50;360 50 50" dur="1s" repeatCount="indefinite"></animateTransform>
                <animate attributeName="stroke-dashoffset" values="0;150" dur="1s" repeatCount="indefinite"></animate>
            </circle>
        </svg>
    </div> -->
    <!-- loading -->
    <!-- loading-spinner -->
    
    <div id="loading" style="display:none">
        <svg xmlns="http://www.w3.org/2000/svg" style="margin: auto; background: none; display: block;" width="100px" height="100px" viewBox="0 0 100 100" preserveAspectRatio="xMidYMid">
          <circle cx="50" cy="50" r="32" stroke-width="8" stroke="#3498db" stroke-dasharray="50.26548245743669 50.26548245743669" fill="none" stroke-linecap="round">
            <animateTransform attributeName="transform" type="rotate" repeatCount="indefinite" dur="1s" keyTimes="0;1" values="0 50 50;360 50 50"></animateTransform>
          </circle>
        </svg>
      </div>

      

    <!-- Instruments and Filters Section -->
   <!-- Instruments and Filters Section -->
<div class="lg:py-28 py-24 px-10" id="content" style="display:none;">
    <div class="container">
       <!-- Search and Filter Section, wrapped in a div with an ID -->
       <div class=" flex lg:flex-row flex-col">

            <div class=" flex flex-col lg:w-1/6 w-full  lg:h-screen lg:fixed lg:top-6 left-10  justify-center ">
                <div id="search-filter-container" class="flex flex-col  my-16">
                    <div class="flex  flex-col  w-full gap-2">
                        <div class="w-full">
                            <input type="text" id="search-input" class="p-2 w-full shadow-md bg-gray-100" placeholder="Search..." oninput="applyFilters()">
                        </div>
                        <div class="w-full">
                            <div id="district-filter-container" class="flex flex-col gap-3  p-2 shadow-md overflow-y-auto ">
                                <!-- District checkboxes will be added here -->
                            </div>
                        </div>
                        
                        <div class="w-full items-end flex">
                            <button class="reset-button text-blue-500 text-sm" onclick="resetFilters()">Reset Filter</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="flex flex-col lg:w-4/5  lg:py-10   ml-auto scroll-hide ">
               <div class=" flex items-end justify-end text-end ">
                    <div id="result-count" class="result-count text-sm items-end justify-end text-end "></div>
               </div>

                <div id="cards-container" class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 lg:grid-cols-3 gap-4 pt-10"></div>
            </div>

       </div>

       <!-- Cards Container -->

       <!-- Single View Container -->
      <!-- Single View Popup Modal -->
        <div id="details-modal" class="fixed inset-0 bg-black bg-opacity-50 h-screen  flex flex-col items-center justify-center my-auto z-50" style="display: none;">
            <button class="absolute top-4 text-2xl right-4 text-white" onclick="closeDetails()">âœ•</button>

            <div id="details-container" class="bg-white shadow-lg md:h-2/3 h-3/4   rounded-lg flex flex-col items-center justify-center my-auto lg:max-w-3xl w-full lg:m-0 m-6 lg:mx-auto p-4 relative">
                <div class=" flex items-start justify-start flex-col text-start w-full">
                    <h2 class="text-lg font-bold text-start justify-start flex flex-col items-start  " id="instrument-name"></h2>
                </div>
                <div class="flex lg:flex-row flex-col gap-4 h-full w-full ">
                    <div class=" lg:w-1/2 w-full flex items-center justify-center">
                        <img src="" alt="" id="instrument-image" class="mb-4 p-3 rounded w-4/5 items-center justify-center  ">
                    </div>
                    <div class="px-3  lg:w-1/2 w-full flex items-center justify-start flex-col my-auto">
                        <p class="w-full flex flex-col font-bold text-2xl  text-start justify-start"><span id="institution-name" class="text-black text-lg  text-start justify-start"></span></p>
                        <div class="w-full flex lg:flex-row flex-col text-justify pt-4 text-base"><span id="address"></span></div>
                        <div class="w-full flex lg:flex-row flex-col pt-6"><strong class="lg:w-1/4 text-gray-700 text-xs">POC</strong><span id="contact-person" class="lg:w-3/4 text-sm"></span></div>
                        <div class="flex lg:flex-row flex-col pt-4">
                            <a id="website-link" href="" target="_blank" class="text-blue-400 hover:text-blue-500 underline absolute bottom-8 right-4">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="w-6">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M12 21a9.004 9.004 0 0 0 8.716-6.747M12 21a9.004 9.004 0 0 1-8.716-6.747M12 21c2.485 0 4.5-4.03 4.5-9S14.485 3 12 3m0 18c-2.485 0-4.5-4.03-4.5-9S9.515 3 12 3m0 0a8.997 8.997 0 0 1 7.843 4.582M12 3a8.997 8.997 0 0 0-7.843 4.582m15.686 0A11.953 11.953 0 0 1 12 10.5c-2.998 0-5.74-1.1-7.843-2.918m15.686 0A8.959 8.959 0 0 1 21 12c0 .778-.099 1.533-.284 2.253m0 0A17.919 17.919 0 0 1 12 16.5c-3.162 0-6.133-.815-8.716-2.247m0 0A9.015 9.015 0 0 1 3 12c0-1.605.42-3.113 1.157-4.418" />
                                </svg>
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </div>
</div>

</Layout>

<script is:inline>
    let allInstruments = [];

    // Fetch instruments data
    async function fetchInstruments() {
        try {
            // Show loading spinner
            document.getElementById('loading').style.display = 'flex';
            document.getElementById('content').style.display = 'none';

            const response = await fetch('https://script.google.com/macros/s/AKfycbyVMzwk67wt92TLUHQ617-qdBF_iug_08eq_CVDIETOvfl6fGe-jsgAsmfhehBTVTHopw/exec');
            const data = await response.json();
            allInstruments = data;

            // Display the list of instruments
            displayInstruments(data);
            populateDistrictFilter(data);
            updateResultCount(data.length, data.length);

            // Hide loading spinner and show content
            document.getElementById('loading').style.display = 'none';
            document.getElementById('content').style.display = 'block';
        } catch (error) {
            console.error("Error fetching instruments:", error);
        }
    }

// Function to extract the image ID from Google Drive URL
function extractImageId(googleDriveUrl) {
    if (typeof googleDriveUrl === 'string') {
        const match = googleDriveUrl.match(/\/d\/(.+?)\//);
        return match ? match[1] : null;
    }
    return null;
}

// Display instruments as cards with lazy loading and fallback for image errors
function displayInstruments(data) {
    const container = document.getElementById('cards-container');
    container.innerHTML = ''; // Clear previous content

    data.forEach(item => {
        // Extract image ID from the Google Drive URL
        const imageId = extractImageId(item.image);
        // If image ID is extracted, construct the displayable Google Drive image URL
        const driveImageUrl = imageId ? `https://lh3.googleusercontent.com/d/${imageId}=s1220` : '/img/noimage.jpg';

        const card = document.createElement('div');
        card.className = 'flex flex-col rounded-lg overflow-hidden cursor-pointer';
        card.innerHTML = `
            <div class="flex-shrink-0 py-1">
                <div class="relative">
                    <a href="javascript:void(0)">
                        <img loading="lazy" src="${driveImageUrl}" alt='No Image Available' class="w-full h-48 rounded-2xl object-cover" 
                             onerror="this.onerror=null;this.src='/img/noimage.jpg';">
                    </a>
                </div>
            </div>
            <div class="flex flex-col lg:pb-0 pb-2  flex-grow relative">
                <a href="javascript:void(0)" class="text-sm pb-2 lg:pb-0 font-semibold text-gray-900 pt-2">${item.instrument}</a>
                <a href="javascript:void(0)" class="text-xs text-gray-600  bottom-0 absolute">
                   ${item.district}
                </a>
            </div>
        `;
        card.addEventListener('click', () => showDetails(item)); // Show single view when clicked
        container.appendChild(card);
    });
}

// Show detailed view of a single instrument
// Show detailed view of a single instrument as a popup modal
// Show detailed view of a single instrument in a modal popup
function showDetails(item) {
    document.getElementById('details-modal').style.display = 'flex'; // Show modal
    
    // Extract image ID from the Google Drive URL
    const imageId = extractImageId(item.image);
    const driveImageUrl = imageId ? `https://lh3.googleusercontent.com/d/${imageId}=s1220` : '/img/noimage.jpg';

    // Populate instrument details
    document.getElementById('instrument-name').textContent = item.instrument;
    document.getElementById('instrument-image').src = driveImageUrl;
    document.getElementById('instrument-image').onerror = function() {
        this.onerror = null;
        this.src = '/img/noimage.jpg';
    };
    document.getElementById('institution-name').textContent = item.institutionName;
    document.getElementById('address').textContent = item.address;
    document.getElementById('website-link').href = item.website;

    // Conditionally display the POC only if it has details
    const contactPersonElement = document.getElementById('contact-person');
    if (item.contactPerson) {
        contactPersonElement.textContent = item.contactPerson;
        contactPersonElement.parentElement.style.display = 'flex'; // Show POC section
    } else {
        contactPersonElement.parentElement.style.display = 'none'; // Hide POC section
    }
}

// Function to close the modal
function closeDetails() {
    document.getElementById('details-modal').style.display = 'none';
}


// Close detailed view popup
function closeDetails() {
    document.getElementById('details-modal').style.display = 'none';
}


// Go back to the cards view
function showCards() {
    document.getElementById('cards-container').style.display = 'grid'; // Show card view
    document.getElementById('details-container').style.display = 'none'; // Hide details view
    document.getElementById('search-filter-container').style.display = 'flex'; // Show search, filters, and result count
}


  

    // Update result count after filtering
    function updateResultCount(matchingCount, totalCount) {
        const resultCountDiv = document.getElementById('result-count');
        resultCountDiv.textContent = `Showing ${matchingCount} of ${totalCount} results`;
    }

    // Populate district filter dropdown with unique districts
  // Populate district checkboxes with unique districts
function populateDistrictFilter(data) {
    const districtFilterContainer = document.getElementById('district-filter-container');
    districtFilterContainer.innerHTML = ''; // Clear existing checkboxes

    // Get unique districts
    const districts = [...new Set(data.map(item => item.district))];

    // Create a checkbox for each unique district
    districts.forEach(district => {
        const checkbox = document.createElement('input');
        checkbox.type = 'checkbox';
        checkbox.value = district;
        checkbox.className = 'district-checkbox';
        checkbox.addEventListener('change', applyFilters); // Reapply filters on change

        const label = document.createElement('label');
        label.className = 'text-base text-gray-700 flex items-center gap-2';
        label.appendChild(checkbox);
        label.appendChild(document.createTextNode(district));

        districtFilterContainer.appendChild(label);
    });
}

// Apply filters based on search input and selected district checkboxes
function applyFilters() {
    const query = document.getElementById('search-input').value.toLowerCase();

    // Get selected districts
    const selectedDistricts = Array.from(document.querySelectorAll('.district-checkbox:checked')).map(cb => cb.value);

    // Filter based on query and selected districts
    const filteredData = allInstruments.filter(item => {
        const matchesQuery = query === '' || 
            item.nameOfFacility.toLowerCase().includes(query) || 
            item.instrument.toLowerCase().includes(query) ||
            item.institutionName.toLowerCase().includes(query) || 
            item.address.toLowerCase().includes(query) || 
            item.contactPerson.toLowerCase().includes(query);

        const matchesDistrict = selectedDistricts.length === 0 || selectedDistricts.includes(item.district);

        return matchesQuery && matchesDistrict;
    });

    // Display the filtered instruments
    displayInstruments(filteredData);
    updateResultCount(filteredData.length, allInstruments.length);
}


    // Reset search and district filter
   // Reset search input and district checkboxes
function resetFilters() {
    document.getElementById('search-input').value = '';
    document.querySelectorAll('.district-checkbox').forEach(checkbox => checkbox.checked = false); // Uncheck all checkboxes
    displayInstruments(allInstruments);
    updateResultCount(allInstruments.length, allInstruments.length);
}


    // Wait for DOM content to load before running scripts
    document.addEventListener("DOMContentLoaded", function() {
        fetchInstruments();
    });
</script>

<style is:global>
    /* Loader styles */
    #loading {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(255, 255, 255, 0.8);
      z-index: 9999;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    /* Modal styling */
#details-modal {
    display: none;
    position: fixed;
    top: 0;
    left: 0;
  
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    align-items: center;
    justify-content: center;
}

  </style>

  
<style is:global>
    .scroll-hide::-webkit-scrollbar {
      display: none;
    }
  </style>